sphinx-master was on commit 3682:d4c6ac1fcc9c by Jon Waltman dating of
Sun Sep 16 01:08:47 2012 -0500. Commit message was:

Closes #617: Fix docstring preparation without included signature: only ignore
indentation of one line, not two.

Repository can be found on https://bitbucket.org/birkenfeld/sphinx/overview

--- /home/fmichea/sphinx-master/sphinx/domains/cpp.py	2012-10-01 17:00:44.932830733 +0200
+++ mycpp.py	2012-10-15 17:46:05.028007287 +0200
@@ -5,23 +5,23 @@
 
     The C++ language domain.
 
-    :copyright: Copyright 2007-2011 by the Sphinx team, see AUTHORS.
+    :copyright: Copyright 2007-2012 by the Sphinx team, see AUTHORS.
     :license: BSD, see LICENSE for details.
 """
 
 import re
-from copy import deepcopy
 
+from copy import deepcopy
 from docutils import nodes
 
 from sphinx import addnodes
-from sphinx.roles import XRefRole
-from sphinx.locale import l_, _
-from sphinx.domains import Domain, ObjType
 from sphinx.directives import ObjectDescription
-from sphinx.util.nodes import make_refnode
+from sphinx.domains import ObjType
+from sphinx.locale import l_, _
+from sphinx.roles import XRefRole
 from sphinx.util.compat import Directive
-from sphinx.util.docfields import Field, GroupedField
+from sphinx.util.docfields import Field, GroupedField, TypedField
+from sphinx.util.nodes import make_refnode
 
 
 _identifier_re = re.compile(r'(~?\b[a-zA-Z_][a-zA-Z0-9_]*)\b')
@@ -196,7 +196,7 @@
         return self.name.replace(u' ', u'-')
 
     def __unicode__(self):
-        return unicode(self.name)
+        return self.name
 
 
 class PathDefExpr(PrimaryDefExpr):
@@ -277,6 +277,19 @@
         return self.typename.get_name()
 
 
+class ArrayTypeDefExpr(WrappingDefExpr):
+    def __init__(self, typename, suffixes):
+        self.typename, self.suffixes = typename, suffixes
+
+    def get_id(self):
+        return u''.join(it.get_id() for it in [self.typename] + self.suffixes)
+
+    def get_name(self):
+        return u''.join(unicode(it) for it in [self.typename] + self.suffixes)
+
+    def __unicode__(self):
+        return self.get_name()
+
 class ModifierDefExpr(WrappingDefExpr):
 
     def __init__(self, typename, modifiers):
@@ -366,7 +379,7 @@
     def __unicode__(self):
         buf = [(u'%s %s' % (self.type or u'', self.name or u'')).strip()]
         if self.default is not None:
-            buf.append('=%s' % self.default)
+            buf.append(' = %s' % self.default)
         for suffix in self.type_suffixes:
             buf.append(unicode(suffix))
         return u''.join(buf)
@@ -391,6 +404,17 @@
         return rv
 
 
+class MemberPtrDefExpr(DefExpr):
+    def __init__(self, clsname, name):
+        self.clsname, self.name = clsname, name
+
+    def get_id(self):
+        return u'{}::P{}'.format(self.clsname.get_id(), self.name.get_id())
+
+    def __unicode__(self):
+        return u'{}::*{}'.format(unicode(self.clsname), unicode(self.name))
+
+
 class TypeObjDefExpr(NamedDefExpr):
 
     def __init__(self, name, visibility, static, typename, type_suffixes):
@@ -459,14 +483,27 @@
         self.pure_virtual = pure_virtual
 
     def get_id(self):
+        name = self.name.get_id().split("(", 1)
+        if len(name) == 2:
+            name = name[0]
+        else:
+            name = self.name.get_id()
         return u'%s%s%s%s' % (
-            self.name.get_id(),
+            name,
             self.signature and u'__' +
                 u'.'.join(x.get_id() for x in self.signature) or u'',
             self.const and u'C' or u'',
             self.constexpr and 'CE' or ''
         )
 
+    def get_name(self):
+        return u'{name}({params}){const}'.format(
+            name = self.name.get_name(),
+            params = ', '.join([unicode(it.type or it.name) for it in
+                                self.signature]),
+            const = ' const' if self.const else '',
+        )
+
     def __unicode__(self):
         buf = self.get_modifiers()
         if self.explicit:
@@ -486,6 +523,24 @@
         return u' '.join(buf)
 
 
+class FuncSigDefExpr(FuncDefExpr):
+    def __init__(self, rv, signature):
+        FuncDefExpr.__init__(self, rv, 'public', False, False, False, rv,
+                             signature, False, False, False)
+
+    def __unicode__(self):
+        return self.get_name()
+
+
+class DefineCallDefExpr(FuncDefExpr):
+    def __init__(self, rv, signature):
+        FuncDefExpr.__init__(self, rv, 'public', False, False, False, rv,
+                             signature, False, False, False)
+
+    def __unicode__(self):
+        return self.get_name()
+
+
 class ClassDefExpr(NamedDefExpr):
 
     def __init__(self, name, visibility, static, bases):
@@ -519,6 +574,7 @@
         'mutable':      None,
         'const':        None,
         'typename':     None,
+        'struct':       None,
         'unsigned':     set(('char', 'short', 'int', 'long')),
         'signed':       set(('char', 'short', 'int', 'long')),
         'short':        set(('int',)),
@@ -607,10 +663,10 @@
         type = self._parse_type()
         return CastOpDefExpr(type)
 
-    def _parse_name(self):
-        return self._parse_name_or_template_arg(False)
+    def _parse_name(self, in_params=False):
+        return self._parse_name_or_template_arg(False, in_params=in_params)
 
-    def _parse_name_or_template_arg(self, in_template):
+    def _parse_name_or_template_arg(self, in_template, in_params=False):
         if not self.match(_identifier_re):
             if not in_template:
                 self.fail('expected name')
@@ -625,8 +681,21 @@
         # operator here as identifier
         if identifier == 'operator':
             return self._parse_operator()
-
-        return NameDefExpr(identifier)
+        res = NameDefExpr(identifier)
+        self.skip_ws()
+        if in_template:
+            if self.current_char == '[':
+                res = ArrayTypeDefExpr(res,
+                                       self._try_parse_type_suffixes())
+            res = self._attach_crefptr(res, False)
+            if self.current_char == '(':
+                res = FuncSigDefExpr(res, self._parse_signature()[0])
+        elif in_params:
+            if self.current_char == '(':
+                res = DefineCallDefExpr(res, self._parse_signature()[0])
+            elif self.skip_string('::*'):
+                res = MemberPtrDefExpr(res, self._parse_name())
+        return res
 
     def _guess_typename(self, path):
         if not path:
@@ -733,9 +802,13 @@
                     if following is not None:
                         return self._parse_builtin(modifier)
                     modifiers.append(modifier)
+                elif 'API' in modifier:
+                    self.skip_ws()
+                    continue
                 else:
                     self.backout()
                     break
+                self.skip_ws()
 
         while 1:
             self.skip_ws()
@@ -792,7 +865,7 @@
                 self.skip_ws()
 
             if self.skip_string('...'):
-                args.append(ArgumentDefExpr(None, '...', [], None))
+                args.append(ArgumentDefExpr(None, NameDefExpr('...'), [], None))
                 if self.skip_string(')'):
                     break
                 else:
@@ -805,7 +878,7 @@
             if self.skip_string('='):
                 default = self._parse_default_expr()
             elif self.current_char not in ',)':
-                argname = self._parse_name()
+                argname = self._parse_name(in_params=True)
                 self.skip_ws()
                 type_suffixes.extend(self._try_parse_type_suffixes())
                 if self.skip_string('='):
@@ -870,6 +943,7 @@
 
     def parse_function(self):
         visibility, static = self._parse_visibility_static()
+        virtual = self.skip_word_and_ws('virtual')
         explicit = self.skip_word_and_ws('explicit')
         constexpr = self.skip_word_and_ws('constexpr')
 
@@ -1078,6 +1152,20 @@
 
 class CPPFunctionObject(CPPObject):
 
+    doc_field_types = [
+        TypedField('parameter', label=l_('Parameters'),
+                   names=('param', 'parameter', 'arg', 'argument'),
+                   typerolename='type', typenames=('type',)),
+        Field('returnvalue', label=l_('Returns'), has_arg=False,
+              names=('returns', 'return')),
+        Field('returntype', label=l_('Return type'), has_arg=False,
+              names=('rtype',)),
+        Field('pre', label=l_('Pre-condition'), has_arg=False,
+              names=('precond')),
+        Field('post', label=l_('Post-condition'), has_arg=False,
+              names=('postcond')),
+    ]
+
     def attach_function(self, node, func):
         owner, name = func.name.split_owner()
         if owner is not None:
@@ -1091,7 +1179,12 @@
             node += nodes.Text(u' ')
             self.attach_type(node, name.typename)
         else:
-            funcname = unicode(name)
+            #discard params
+            sname = unicode(name).split('(', 1)
+            if len(sname) == 2:
+                funcname = unicode(sname[0])
+            else:
+                funcname = unicode(name)
             node += addnodes.desc_name(funcname, funcname)
 
         paramlist = addnodes.desc_parameterlist()
@@ -1103,8 +1196,8 @@
             param += nodes.emphasis(unicode(arg.name), unicode(arg.name))
             self.attach_type_suffixes(param, arg.type_suffixes)
             if arg.default is not None:
-                def_ = u'=' + unicode(arg.default)
-                param += nodes.emphasis(def_, def_)
+                def_ = u' = ' + unicode(arg.default)
+                param += nodes.Text(def_)
             paramlist += param
 
         node += paramlist
@@ -1166,6 +1259,10 @@
 
 class CPPXRefRole(XRefRole):
 
+    def __call__(self, *args, **kwargs):
+        res = XRefRole.__call__(self, *args, **kwargs)
+        return res
+
     def process_link(self, env, refnode, has_explicit_title, title, target):
         refnode['cpp:parent'] = env.temp_data.get('cpp:parent')
         if not has_explicit_title:
@@ -1179,8 +1276,9 @@
                     title = title[dcolon + 2:]
         return title, target
 
+from sphinx.domains.cpp import CPPDomain
 
-class CPPDomain(Domain):
+class MyCPPDomain(CPPDomain):
     """C++ language domain."""
     name = 'cpp'
     label = 'C++'
@@ -1199,10 +1297,11 @@
         'namespace':    CPPCurrentNamespace
     }
     roles = {
-        'class':  CPPXRefRole(),
-        'func' :  CPPXRefRole(fix_parens=True),
+        'class': CPPXRefRole(),
+        'func' : CPPXRefRole(), # FIXME: fix_parens=True),
         'member': CPPXRefRole(),
-        'type':   CPPXRefRole()
+        'type': CPPXRefRole(),
+        'macro': CPPXRefRole(),
     }
     initial_data = {
         'objects': {},  # fullname -> docname, objtype
